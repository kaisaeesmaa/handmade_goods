openapi: 3.0.2
info:
  title: Marketplace
  version: 1.0.0
paths:
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - /users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                'Invalid email: {reason}':
                  value: 'Invalid email: {reason}'
                Email and password are required:
                  value: Email and password are required
                Password must be at least 8 characters long:
                  value: Password must be at least 8 characters long
                Email must be in a valid format:
                  value: Email must be in a valid format
          description: Client side error
        '409':
          content:
            text/html:
              examples:
                Email is already in use:
                  value: Email is already in use
          description: The email address provided already exists in the system
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - /sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Successful response.
        '400':
          content:
            text/html: { }
          description: Bad request
        '401':
          content:
            text/html:
              examples:
                Invalid password:
                  value: Invalid password
          description: Unauthorized
        '404':
          content:
            text/html:
              examples:
                User not found:
                  value: User not found
          description: Not found
      operationId: createSession
      summary: Create a Session
      description: 'Creates a new instance of a `Session`, signing the user in. Returns sessionId. '
    delete:
      tags:
        - /sessions
      responses:
        '204':
          description: 'Succesful response. '
        '400':
          content:
            text/html:
              examples:
                Invalid authorization header:
                  value: Invalid authorization header
                Invalid session:
                  value: Invalid session
          description: Bad request
        '401':
          content:
            text/html:
              examples:
                Missing authorization header:
                  value: Missing authorization header
          description: Unauthorized
      security:
        - Bearer: [ ]
      summary: Destroy a Session
      description: 'Destroys a Session, signing the user out. Reads the session ID from Authorization header. '
  /products:
    summary: Path used to manage the list of products.
    description: >-
      The REST endpoint/path used to list and create zero or more `Product` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    get:
      tags:
        - /products
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: Successful response - returns an array of `Product` entities.
        '401':
          description: Unauthorized
      security:
        - Bearer: [ ]
      operationId: getProducts
      summary: List All Products
      description: Gets a list of all `Product` entities.
components:
  schemas:
    User:
      title: Root Type for User
      description: ''
      type: object
      properties:
        id:
          format: int32
          description: A field that represents the unique identifier of the user.
          type: integer
          example: '12345'
        email:
          description: A field that represents the email address of the user
          type: string
          example: john.doe@example.com
        password:
          description: A field that represents the password hash of the user.
          type: string
          example: MySecurePassword123
      example:
        id: 2
        email: email@example.com
        password: pass123
    Session:
      title: Root Type for Session
      description: ''
      type: object
      properties:
        id:
          type: string
        userId:
          format: int32
          type: integer
      example:
        id: 330d67de-432b-48ce-jokg-vkok6950kj9k
        userId: 1
    Credentials:
      title: Root Type for Credentials
      description: ''
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      example:
        email: admin
        password: Konnakulles
    Product:
      title: Root Type for Product
      description: ''
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          format: int32
          type: integer
        userId:
          format: int32
          type: integer
      example:
        name: Product 1
        description: Product 1 description
        price: 100
        userId: 1
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  - name: /users
    description: ''
  - name: /sessions
    description: ''
  - name: /products
    description: ''
